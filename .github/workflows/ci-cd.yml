name: CI-CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - dev

jobs:
  # unit-test:
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       folder: [frontend] # List all directories with `package.json`

  #   steps:
  #     # Checkout the repository
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     # Set up Node.js
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16

  #     # Navigate to the folder and install dependencies
  #     - name: Navigate to folder and install dependencies
  #       run: |
  #         cd ${{ matrix.folder }}
  #         npm install

  #     # Run tests with coverage
  #     - name: Run tests
  #       run: |
  #         cd ${{ matrix.folder }}
  #         npm test -- --coverage

  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # integration-tests:
  #   runs-on: ubuntu-latest
  #   # needs: unit-test

  #   steps:
  #     # Checkout the repository
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     # Set up Docker
  #     - name: Set up Docker
  #       uses: docker/setup-buildx-action@v2

  #     # Install Docker Compose
  #     - name: Install Docker Compose
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y docker-compose

  #     # Build and Start Services
  #     - name: Build and Start Side Services (-d flag)
  #       run: docker-compose up -d postgres marketplace-db auth-service user-service marketplace-service

  #     - name: Build and Start tested Services
  #       run: docker-compose up -d api-gateway chat-assistant nats-server
        
  #     # Wait for Services to Initialize
  #     - name: Wait for Services to Initialize
  #       run: sleep 10
        
  #     # Run Tests in Test Runner
  #     - name: Run Tests in Test Runner
  #       run: docker-compose run test_runner

  #     # Shut Down Services
  #     - name: Shut Down Services
  #       if: always()
  #       run: docker-compose down