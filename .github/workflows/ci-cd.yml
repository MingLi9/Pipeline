name: CI-CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - dev

jobs:
  unit-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        folder: [frontend/src] # List all directories with `package.json`

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Navigate to the folder and install dependencies
      - name: Navigate to folder and install dependencies
        run: |
          cd ${{ matrix.folder }}
          npm install

      # Run tests with coverage
      - name: Run tests
        run: |
          cd ${{ matrix.folder }}
          npm test -- --coverage

  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  integration-tests:
    runs-on: ubuntu-latest
    # needs: unit-test

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Build and Start Services
      - name: Build and Start Side Services (-d flag)
        run: docker-compose up -d postgres marketplace-db auth-service user-service marketplace-service

      - name: Build and Start tested Services
        run: docker-compose up -d api-gateway chat-assistant nats-server
        
      # Wait for Services to Initialize
      - name: Wait for Services to Initialize
        run: sleep 10
        
      # Run Tests in Test Runner
      - name: Run Tests in Test Runner
        run: docker-compose run test_runner

      # Shut Down Services
      - name: Shut Down Services
        if: always()
        run: docker-compose down
  
  e2e-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Build and start Docker Compose services
      run: docker-compose up -d --build

    - name: Wait for services to be up
      run: |
        echo "Waiting for services to be up..."
        sleep 30  # Adjust the sleep time as necessary for your services to be ready

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Navigate to frontend/e2e
      working-directory: ./frontend/e2e
      run: echo "Changed directory to frontend/e2e"

    - name: Set CI environment variable
      run: echo "CI=true" >> $GITHUB_ENV

    - name: Install dependencies
      working-directory: ./frontend/e2e
      run: npm install

    - name: Install Playwright browsers
      working-directory: ./frontend/e2e
      run: npx playwright install

    - name: Run end-to-end tests
      working-directory: ./frontend/e2e
      run: npx playwright test
      continue-on-error: false

    - name: Upload Playwright test results
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: playwright-results
        path: frontend/e2e/playwright-report/

    - name: Stop Docker Compose services
      run: docker-compose down